<launch>
    <arg name="fixed_frame" default="world"/>
    <!-- joint_state_publisher从参数服务器读取robots_description参数，找到所有非固定关节，发布到/joint_states -->
<!--    <param name="robot_description" textfile="$(find hybrid_a_star)/model/car_model/default.urdf"/>-->
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find hybrid_a_star)/model/car_model/racecar.urdf.xacro'"/>

    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <!--模型车的起点放置位置-->
    <arg name="x_pos" default="0.0"/>
    <arg name="y_pos" default="0"/>
    <arg name="z_pos" default="0.0"/>

    <arg name="map_size_x" default="15.0"/>
    <arg name="map_size_y" default="15.0"/>
    <arg name="map_resolution" default="0.05"/>


    <!--运行gazebo仿真环境-->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
        <arg name="world_name" value="$(find simulate)/worlds/robocup_home.world"/>
        <!-- .world文件的地址-->
    </include>

    <!-- 在gazebo中加载机器人模型 -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model racecar -param robot_description -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos)"/>

    <!-- 从yaml文件加载联合控制器的参数 -->
    <rosparam file="$(find simulate)/config/ctrl.yaml" command="load"/>
    <!-- 加载控制器 spawner -->
    <node name="controller_manager" pkg="controller_manager" type="spawner"
          respawn="false" output="screen" ns="/racecar"
          args="left_rear_wheel_velocity_controller       right_rear_wheel_velocity_controller
	            left_front_wheel_velocity_controller      right_front_wheel_velocity_controller
	            left_steering_hinge_position_controller   right_steering_hinge_position_controller
	            joint_state_controller"/>


<!--    <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher"/>-->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="20.0" />
        <remap from="/joint_states" to="/racecar/joint_states"/>
    </node>


    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find simulate)/rviz/display_hybrid_astar.rviz"/>

    <!--static_transform_publisher x y z yaw pitch roll frame_id child_frame_id period_in_ms-->
    <!-- 静态发布器，发布world和map的变换关系 -->
<!--    <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster"-->
<!--          args="0 0 0 0 0 0 world map 100"/>-->

    <node pkg="map_server" type="map_server" name="map_server" args="$(find simulate)/maps/map.yaml"/>
    <node name="global_costmap" pkg="costmap_2d" type="costmap_2d_node" output="screen">
        <rosparam file="$(find simulate)/param/global_costmap_params.yaml" command="load"/>
        <rosparam file="$(find simulate)/param/costmap_common_params.yaml" command="load" ns="costmap"/>
    </node>

<!--    <node name="local_costmap" pkg="costmap_2d" type="costmap_2d_node" output="screen">-->
<!--        <rosparam file="$(find hybrid_a_star)/param/local_costmap_params.yaml" command="load"/>-->
<!--        <rosparam file="$(find hybrid_a_star)/param/costmap_common_params.yaml" command="load" ns="costmap"/>-->
<!--    </node>-->



<!--    <node pkg="tf" type="static_transform_publisher"-->
<!--        name="odom_to_map"-->
<!--        args="0 0 0 0 0 0 1  /odom /map 100" />-->

<!--    odom->base_footprint-->
    <node pkg="scripts" type="gazebo_odometry.py" name="gazebo_odometry_node" />
    <node pkg="scripts" type="servo_commands.py" name="servo_commands" />
    <!--    把导航的/cmd_vel信息转换到阿克曼小车的轮速和转角上-->
    <node pkg="scripts" type="nav_sim.py" name="nav_sim"/>

    <!-- amcl map->odom-->
    <include file="$(find simulate)/launch/robot_amcl.launch.xml" />


<!--    <node pkg="trajectory_generator" type="run_minimum_snap_2d" name="run_minimum_snap_2d" output="screen">-->
<!--        <param name="minimum_snap/max_vel" value="1.0"/>-->
<!--        <param name="minimum_snap/max_accel" value="1.0"/>-->
<!--        <param name="minimum_snap/order" value="3"/>-->
<!--    </node>-->

    <node pkg="path_searcher" type="run_astar_2d" name="run_astar_2d" output="screen">
        <param name="map/use_occmap" value="true"/>
        <param name="map/x_size" value="$(arg map_size_x)"/>
        <param name="map/y_size" value="$(arg map_size_y)"/>
        <param name="map/resolution" value="$(arg map_resolution)"/>

        <param name="planning/start_x" value="x_pos"/>
        <param name="planning/start_y" value="y_pos"/>
        <param name="planning/allow_diagonal" value="true"/>
    </node>

    <node pkg="trajectory_generator" type="run_minimum_snap_2d" name="run_minimum_snap_2d" output="screen">
        <param name="minimum_snap/max_vel" value="1.0"/>
        <param name="minimum_snap/max_accel" value="1.0"/>
        <param name="minimum_snap/order" value="3"/>
        <param name="minimum_snap/angle_threshold" value="0.1"/>
    </node>



</launch>
