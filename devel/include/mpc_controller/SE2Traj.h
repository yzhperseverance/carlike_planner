// Generated by gencpp from file mpc_controller/SE2Traj.msg
// DO NOT EDIT!


#ifndef MPC_CONTROLLER_MESSAGE_SE2TRAJ_H
#define MPC_CONTROLLER_MESSAGE_SE2TRAJ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace mpc_controller
{
template <class ContainerAllocator>
struct SE2Traj_
{
  typedef SE2Traj_<ContainerAllocator> Type;

  SE2Traj_()
    : start_time()
    , pos_pts()
    , angle_pts()
    , init_v()
    , init_a()
    , posT_pts()
    , angleT_pts()  {
    }
  SE2Traj_(const ContainerAllocator& _alloc)
    : start_time()
    , pos_pts(_alloc)
    , angle_pts(_alloc)
    , init_v(_alloc)
    , init_a(_alloc)
    , posT_pts(_alloc)
    , angleT_pts(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _pos_pts_type;
  _pos_pts_type pos_pts;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _angle_pts_type;
  _angle_pts_type angle_pts;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _init_v_type;
  _init_v_type init_v;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _init_a_type;
  _init_a_type init_a;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _posT_pts_type;
  _posT_pts_type posT_pts;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _angleT_pts_type;
  _angleT_pts_type angleT_pts;





  typedef boost::shared_ptr< ::mpc_controller::SE2Traj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc_controller::SE2Traj_<ContainerAllocator> const> ConstPtr;

}; // struct SE2Traj_

typedef ::mpc_controller::SE2Traj_<std::allocator<void> > SE2Traj;

typedef boost::shared_ptr< ::mpc_controller::SE2Traj > SE2TrajPtr;
typedef boost::shared_ptr< ::mpc_controller::SE2Traj const> SE2TrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc_controller::SE2Traj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc_controller::SE2Traj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mpc_controller::SE2Traj_<ContainerAllocator1> & lhs, const ::mpc_controller::SE2Traj_<ContainerAllocator2> & rhs)
{
  return lhs.start_time == rhs.start_time &&
    lhs.pos_pts == rhs.pos_pts &&
    lhs.angle_pts == rhs.angle_pts &&
    lhs.init_v == rhs.init_v &&
    lhs.init_a == rhs.init_a &&
    lhs.posT_pts == rhs.posT_pts &&
    lhs.angleT_pts == rhs.angleT_pts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mpc_controller::SE2Traj_<ContainerAllocator1> & lhs, const ::mpc_controller::SE2Traj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mpc_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mpc_controller::SE2Traj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_controller::SE2Traj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc_controller::SE2Traj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc_controller::SE2Traj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_controller::SE2Traj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_controller::SE2Traj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc_controller::SE2Traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f921a322e80c694816eb9412daf79b62";
  }

  static const char* value(const ::mpc_controller::SE2Traj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf921a322e80c6948ULL;
  static const uint64_t static_value2 = 0x16eb9412daf79b62ULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc_controller::SE2Traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc_controller/SE2Traj";
  }

  static const char* value(const ::mpc_controller::SE2Traj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc_controller::SE2Traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MINCO trajectory\n"
"\n"
"time start_time\n"
"geometry_msgs/Point[] pos_pts\n"
"geometry_msgs/Point[] angle_pts\n"
"geometry_msgs/Vector3 init_v\n"
"geometry_msgs/Vector3 init_a\n"
"float64[] posT_pts\n"
"float64[] angleT_pts\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mpc_controller::SE2Traj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc_controller::SE2Traj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_time);
      stream.next(m.pos_pts);
      stream.next(m.angle_pts);
      stream.next(m.init_v);
      stream.next(m.init_a);
      stream.next(m.posT_pts);
      stream.next(m.angleT_pts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SE2Traj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc_controller::SE2Traj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc_controller::SE2Traj_<ContainerAllocator>& v)
  {
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "pos_pts[]" << std::endl;
    for (size_t i = 0; i < v.pos_pts.size(); ++i)
    {
      s << indent << "  pos_pts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pos_pts[i]);
    }
    s << indent << "angle_pts[]" << std::endl;
    for (size_t i = 0; i < v.angle_pts.size(); ++i)
    {
      s << indent << "  angle_pts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.angle_pts[i]);
    }
    s << indent << "init_v: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.init_v);
    s << indent << "init_a: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.init_a);
    s << indent << "posT_pts[]" << std::endl;
    for (size_t i = 0; i < v.posT_pts.size(); ++i)
    {
      s << indent << "  posT_pts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.posT_pts[i]);
    }
    s << indent << "angleT_pts[]" << std::endl;
    for (size_t i = 0; i < v.angleT_pts.size(); ++i)
    {
      s << indent << "  angleT_pts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angleT_pts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_CONTROLLER_MESSAGE_SE2TRAJ_H
